---
name: github-actions-sample-main.yml
#       10        20        30        40        50        60        70        80
# 3456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 
on: push

env:
  AZURE_FUNCTIONAPP_NAME: 'ghal-dev-fa'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'  
  DOTNET_VERSION: '8.0.x'

jobs:
  ## Super-Linter is a pain in the workflow!
  # lint-job:
  #   name: Lint code
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run linter
  #       uses: github/super-linter@v7
  #       env: 
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}
  #         # VALIDATE_JAVASCRIPT_PRETTIER: true
  #         FIX_JAVASCRIPT_PRETTIER: true
  
  terraform:
    name: "Terraform build/deploy"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/GitHubActionsInfrastructure
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NOdeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.4

      - name: Terrformm init
        run: terraform init

      - name: Terrform plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve -no-color

  build-job:
    name: Build web API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/src/GitHubActionsWebApi
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]
    env:
      ACTIONS_STEP_DEBUG: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/lmcwhirt-insight/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}

      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
          preferLatestVersion: true

      - name: Determine version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v0

      - name: Log gitversion output
        run: echo "gitversion.output:c ${{ toJSON(steps.gitversion.outputs) }}"

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ format('{0}.{1}.{2}', steps.gitversion.outputs.major, steps.gitversion.outputs.minor, steps.gitversion.outputs.buildMetaData) }}

      - name: Test with the dotnet CLI
        run: dotnet test --no-restore --results-directory "TestResults-${{ matrix.dotnet-version }}" ../GitHubActionsWebApiTest/GitHubActionsWebApiTest.csproj

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results-${{ matrix.dotnet-version }}
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/TestResults-${{ matrix.dotnet-version }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Publish the project
        run: dotnet publish -c Release -o ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/api-publish
  
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-function-package
          path: "**/api-publish/"

      # - name: Dotnet package
      #   run: dotnet pack --no-restore --configuration Release /p:PackageVersion=${{ format('{0}.{1}.{2}', steps.gitversion.outputs.major, steps.gitversion.outputs.minor, steps.gitversion.outputs.buildMetaData) }}
        
      # - name: Dotnet publish
      #   run: dotnet nuget push ./bin/Release/*.nupkg --skip-duplicate
      
      # - name: Download Artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: api-function-package
      #     path: artifact-download

      - name: Dir - ls -la .
        run: ls -la .

      - name: Dir - ls -la ${{ env.GITHUB_WORKSPACE }}
        run: ls -la ${{ env.GITHUB_WORKSPACE }}

      - name: 'Deploy function'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }} 
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/api-publish/'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
      